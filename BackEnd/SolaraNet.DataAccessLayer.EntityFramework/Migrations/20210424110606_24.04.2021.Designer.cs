// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolaraNet.DataAccessLayer.EntityFramework.DBContext;

namespace SolaraNet.DataAccessLayer.EntityFramework.Migrations
{
    [DbContext(typeof(SolaraNetDBContext))]
    [Migration("20210424110606_24.04.2021")]
    partial class _24042021
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "d3300ca5-846f-4e6b-ac5f-1d3933115e67",
                            ConcurrencyStamp = "4ada3502-c503-4f57-8068-305ea2454d8d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "185230d2-58d8-4e29-aefd-a257fb82a150",
                            ConcurrencyStamp = "8be86482-3990-4250-8f64-108789a75b81",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "98b651ae-c9aa-4731-9996-57352d525f7e",
                            RoleId = "d3300ca5-846f-4e6b-ac5f-1d3933115e67"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBAdvertisment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdvertismentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DBCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DBCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Advertisments");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBAvatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Транспорт"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Вещи"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Недвижимость"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Электроника"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Автомобили",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Мотоциклы",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Спецтехника",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Водный транспорт",
                            ParentId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Одежда, обувь",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Аксессуары",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Для детей",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Прочее",
                            ParentId = 2
                        },
                        new
                        {
                            Id = 17,
                            CategoryName = "Телефоны",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 18,
                            CategoryName = "Ноутбуки",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 19,
                            CategoryName = "Комплектующие",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 20,
                            CategoryName = "Электро-аксессуары",
                            ParentId = 4
                        },
                        new
                        {
                            Id = 13,
                            CategoryName = "Квартиры",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 14,
                            CategoryName = "Дома",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 15,
                            CategoryName = "Комнаты",
                            ParentId = 3
                        },
                        new
                        {
                            Id = 16,
                            CategoryName = "Гаражи",
                            ParentId = 3
                        });
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertismentId")
                        .HasColumnType("int");

                    b.Property<int>("CommentStatus")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertismentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBImageOfAdvertisment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertismentId")
                        .HasColumnType("int");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvertismentId");

                    b.ToTable("ImagesOfAdvertisments");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Avatars")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Avatars")
                        .IsUnique()
                        .HasFilter("[Avatars] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "98b651ae-c9aa-4731-9996-57352d525f7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a941b3c1-bfb5-4538-97b7-abed0e4267ab",
                            Email = "zubenko@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZUBENKO@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJILuXuYb/o37X7gTLJloDAgZyKs8Dw5cBsOYQMAN8bBwAcwKi32jvkcjfytda15MA==",
                            PhoneNumber = "79781067697",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d6d54bf-2a7c-4a97-9866-5f4811f17e58",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBAdvertisment", b =>
                {
                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBCategory", "DBCategory")
                        .WithMany("Advertisments")
                        .HasForeignKey("DBCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DBCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBCategory", b =>
                {
                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBCategory", "Parent")
                        .WithMany("UnderCategories")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBComment", b =>
                {
                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBAdvertisment", "Advertisment")
                        .WithMany("Comments")
                        .HasForeignKey("AdvertismentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Advertisment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBImageOfAdvertisment", b =>
                {
                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBAdvertisment", "Advertisment")
                        .WithMany("Image")
                        .HasForeignKey("AdvertismentId");

                    b.Navigation("Advertisment");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBUser", b =>
                {
                    b.HasOne("SolaraNet.DataAccessLayer.Entities.DBAvatar", "Avatar")
                        .WithOne("User")
                        .HasForeignKey("SolaraNet.DataAccessLayer.Entities.DBUser", "Avatars");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBAdvertisment", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBAvatar", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBCategory", b =>
                {
                    b.Navigation("Advertisments");

                    b.Navigation("UnderCategories");
                });

            modelBuilder.Entity("SolaraNet.DataAccessLayer.Entities.DBUser", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
